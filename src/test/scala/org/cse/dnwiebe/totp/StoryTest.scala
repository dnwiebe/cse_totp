package org.cse.dnwiebe.totp
import java.time.Instant
import java.time.temporal.ChronoUnit

import org.scalatest.path

class StoryTest extends path.FunSpec {

  describe ("For RealTotp:") {
    test (new RealTotpFactory)
  }

  describe ("For ToyTotp:") {
    test (new ToyTotpFactory)
  }

  def test (factory: TotpFactory) {
    describe ("A server-side Totp") {
      val serverTotp = factory.make()

      describe ("asked for an identity") {
        val identity = serverTotp.generateIdentity ()

        describe ("and given a timestamp") {
          val timestamp = Instant.parse ("1941-12-07T17:53:12.000Z")

          describe ("and a client-side Totp") {
            val clientTotp = factory.make()

            it ("passwords generated by client and server agree") {
              assert (clientTotp.generatePassword (identity, timestamp) ===
                serverTotp.generatePassword (identity, timestamp))
            }

            it ("the client can be somewhat early and still match") {
              assert (clientTotp.generatePassword (identity, timestamp.minus (10, ChronoUnit.SECONDS)) ===
                serverTotp.generatePassword (identity, timestamp))
            }

            it ("the client can be somewhat late and still match") {
              assert (clientTotp.generatePassword (identity, timestamp.plus (10, ChronoUnit.SECONDS)) ===
                serverTotp.generatePassword (identity, timestamp))
            }

            it ("the client won't be authorized if it's too early") {
              assert (clientTotp.generatePassword (identity, timestamp.minus (60, ChronoUnit.SECONDS)) !==
                serverTotp.generatePassword (identity, timestamp))
            }

            it ("the client won't be authorized if it's too late") {
              assert (clientTotp.generatePassword (identity, timestamp.plus (60, ChronoUnit.SECONDS)) !==
                serverTotp.generatePassword (identity, timestamp))
            }
          }
        }
      }
    }
  }
}
